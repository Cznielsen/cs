var resources = require('./../../resources/model');
var actuator, interval;
var model = resources.pi.actuators.leds['1'];
var pluginName = model.name;
var localParams = {};

exports.start = function (params) {
    localParams = params;
    resources.observe(changes => {
        changes.forEach(change => {
            if (change.type === 'update' &&
                model === change.path.slice(0, -1).reduce((obj, i) => obj[i], resources)) {
                switchOnOff(change.value);
            }
        });
    });

    if (localParams.simulate) {
        simulate();
    } else {
        connectHardware();
    }
};

exports.stop = function () {
    if (localParams.simulate) {
        clearInterval(interval);
    } else {
        actuator.unexport();
    }
    console.info('%s plugin stopped!', pluginName);
};

function switchOnOff(value) {
    if (!localParams.simulate) {
        actuator.write(value === true ? 1 : 0, function () { //#C
            console.info('Changed value of %s to %s', pluginName, value);
        });
    }
}

function connectHardware() {
    var Gpio = require('onoff').Gpio;
    actuator = new Gpio(model.gpio, 'out'); //#D
    console.info('Hardware %s actuator started!', pluginName);
}

function simulate() {
    interval = setInterval(function () {
        // Switch value on a regular basis
        model.value = !model.value;
    }, localParams.frequency);
    console.info('Simulated %s actuator started!', pluginName);
}
