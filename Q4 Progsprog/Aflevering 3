;; dProgSprog DA6 - Aflevering 3
;; Christian Zhuang-Qing Nielsen
;; 201504624, christian@czn.dk
;; 1. maj 2016



;; =========== ### EXERCISE 1 ### ============
;; Trace og sammenlign.

(define plus
  (lambda (n1 n2)
    (if (zero? n1)
        n2
        (+ 1 (plus (- n1 1) n2)))))


(define plus_revisited
  (lambda (n1 n2)
    (letrec ([visit (lambda (n1 n2)
                      (if (= n1 0)
                          n2
                          (+ 1 (visit (- n1 1) n2))))])
      (visit n1 n2))))


(define plus_revisited_alt
  (lambda (n1 n2)
    (letrec ([visit (lambda (n1)
                      (if (= n1 0)
                          n2
                          (+ 1 (visit (- n1 1)))))])
      (visit n1))))

;;Trace-funktion for plus_revisited
(define plus_revisited_traced
  (trace-lambda plus_revisited (n1 n2)
    (letrec ([visit_traced (trace-lambda visit (n1 n2)
                      (if (= n1 0)
                          n2
                          (+ 1 (visit_traced (- n1 1) n2))))])
      (visit_traced n1 n2))))


;;Trace-funktion for plus_revisited_alt
(define plus_revisited_alt_traced
  (trace-lambda plus_revisited_alt (n1 n2)
    (letrec ([visit_traced (trace-lambda visit (n1)
                      (if (= n1 0)
                          n2
                          (+ 1 (visit_traced (- n1 1)))))])
      (visit_traced n1))))


;;Trace-resultater:
;; |(plus_revisited 3 5)
;; |(visit 3 5)
;; | (visit 2 5)
;; | |(visit 1 5)
;; | | (visit 0 5)
;; | | 5
;; | |6
;; | 7
;; |8
;; 8

;; |(plus_revisited_alt 3 5)
;; |(visit 3)
;; | (visit 2)
;; | |(visit 1)
;; | | (visit 0)
;; | | 5
;; | |6
;; | 7
;; |8
;; 8

;;(EDIT 7. maj 2016)
;;Forskellen mellem plus_revisited og plus_revisited_alt er at den lambda-droppede metode ikke skaber en ny instans af
;;den anden variabel når denne ikke ændrer sig. I dette tilfælde er den anden variabel 5, men den ændrer sig ikke i
;;nogen af de rekursive kald, derfor kan den undlades, hvilket stadig resulterer i et korrekt svar.


;; Programmér rekursive procedurer som ganger, opløfter i potens og tager fakulteten af en variabel:
;; Her er de originale metoder:
(define times
  (lambda (n1 n2)
    (if (zero? n1)
        0
        (plus n2 (times (- n1 1) n2)))))

(define power
  (lambda (x n)
    (if (zero? n)
        1
        (times x (power x (- n 1))))))

(define fac
  (lambda (n)
    (if (zero? n)
        1
        (times n (fac (- n 1))))))

;;Her er de revisiterede metoder:

(define times_revisited
  (lambda (n1 n2)
    (letrec ([visit (lambda (n1 n2)
                      (if (= n1 0)
                          0
                          (+ n2 (visit (- n1 1) n2))))])
      (visit n1 n2))))

(define power_revisited
  (lambda (x n)
    (letrec ([visit (lambda (x n)
                      (if (= n 0)
                          1
                          (* x (visit x (- n 1)))))])
      (visit x n))))

(define fac_revisited
  (lambda (n)
    (letrec ([visit (lambda (n)
                       (if (= n 0)
                           1
                           (* n (visit (- n 1)))))])
      (visit n))))

;;Her er de revsiterede metoder i lambda-droppet form: (EDIT: 7. maj 2016)

(define times_revisited_alt
  (lambda (n1 n2)
    (letrec ([visit (lambda (n1)
                      (if (= n1 0)
                          0
                          (+ n2 (visit (- n1 1)))))])
      (visit n1))))

(define power_revisited_alt
  (lambda (x n)
    (letrec ([visit (lambda (n)
                      (if (= n 0)
                          1
                          (* x (visit (- n 1)))))])
      (visit n))))

;;fac_revisited_alt
;;Der findes ikke en lambda-droppet  form for fakultet eftersom den kun har én variabel i forvejen.


;; =========== ### EXERCISE 7 ### ============

;;Ekstra funktion til tjek
(define proper-list-of-given-length?
  (lambda (v n)
    (or (and (null? v)
             (= n 0))
        (and (pair? v)
             (> n 0)
             (proper-list-of-given-length? (cdr v)
                                           (1- n))))))


;;Constructors
(define make-literal
  (lambda (n)
    (list 'literal n)))
(define make-plus
  (lambda (e1 e2)
    (list 'plus e1 e2)))
(define make-times
  (lambda (e1 e2)
    (list 'times e1 e2)))

(define make-minus
  (lambda (e1 e2)
    (list 'minus e1 e2)))
(define make-quotient
  (lambda (e1 e2)
    (list 'quotient e1 e2)))
(define make-remainder
  (lambda (e1 e2)
    (list 'remainder e1 e2)))

;;Predicates
(define is-literal?
  (lambda (v)
    (and (pair? v)
         (equal? (car v) 'literal)
         (proper-list-of-given-length? (cdr v) 1))))
(define is-plus?
  (lambda (v)
    (and (pair? v)
         (equal? (car v) 'plus)
         (proper-list-of-given-length? (cdr v) 2))))
(define is-times?
  (lambda (v)
    (and (pair? v)
         (equal? (car v) 'times)
         (proper-list-of-given-length? (cdr v) 2))))

(define is-minus?
  (lambda (v)
    (and (pair? v)
         (equal? (car v) 'minus)
         (proper-list-of-given-length? (cdr v) 2))))
(define is-quotient?
  (lambda (v)
    (and (pair? v)
         (equal? (car v) 'quotient)
         (proper-list-of-given-length? (cdr v) 2))))
(define is-remainder?
  (lambda (v)
    (and (pair? v)
         (equal? (car v) 'remainder)
         (proper-list-of-given-length? (cdr v) 2))))

;;Acessors
(define literal-1
  (lambda (v)
    (list-ref v 1)))
(define plus-1
  (lambda (v)
    (list-ref v 1)))
(define plus-2
  (lambda (v)
    (list-ref v 2)))
(define times-1
  (lambda (v)
    (list-ref v 1)))
(define times-2
  (lambda (v)
    (list-ref v 2)))

(define minus-1
  (lambda (v)
    (list-ref v 1)))
(define minus-2
  (lambda (v)
    (list-ref v 2)))
(define quotient-1
  (lambda (v)
    (list-ref v 1)))
(define quotient-2
  (lambda (v)
    (list-ref v 2)))
(define remainder-1
  (lambda (v)
    (list-ref v 1)))
(define remainder-2
  (lambda (v)
    (list-ref v 2)))

;;Velformede eksempler og positiv unit test.
(define ae0
  (make-literal 42))
(define ae1
  (make-plus (make-literal 1)
             (make-literal 10)))
(define ae2
  (make-plus ae1
             (make-plus (make-literal 100)
                        (make-literal 1000))))
(define ae3
  (make-times
    (make-times
      (make-times
        (make-literal 1)
        (make-literal 2))
      (make-literal 3))
    (make-times
      (make-literal 4)
      (make-literal 5))))
(define ae4
  (make-minus (make-literal 7)
              (make-literal 5)))
(define ae5
  (make-minus  ae4
               (make-minus (make-literal 50)
                           (make-literal 500))))
(define ae6
  (make-quotient (make-literal 12)
                 (make-literal 4)))
(define ae7
  (make-quotient (make-literal 0)
                 (make-literal 10)))
(define ae8
  (make-remainder (make-literal 4)
                  (make-literal 6)))
(define ae9
  (make-remainder (make-literal 0)
                  (make-literal 10)))


(define test-check_well-formed-arithmetic-expressions
  (lambda (candidate)
    (and (candidate ae0)
         (candidate ae1)
         (candidate ae2)
         (candidate ae3)
         (candidate ae4)
         (candidate ae5)
         (candidate ae6)
         (candidate ae7)
         (candidate ae8)
         (candidate ae9)
         )))

;;Ikke-velformede eksempler og negativ unit test.
(define ea0
  42)
(define ea1
  '(literal))
(define ea2
  '(literal . whatever))
(define ea3
  '(literal 10 . whatever))
(define ea4
  '(literal 10 20))
(define ea5
  '(plus))
(define ea6
  '(plus . whatever))
(define ea7
  '(plus (literal 10) . whatever))
(define ea8
  '(plus (literal 10) (literal 20) . whatever))
(define ea9
  '(plus (literal 10) (literal 20) (literal 30)))
(define ea10
  '(minus (literal 10) . streetfightereretgodtspil))
(define ea11
'(minus (30) (10)))
(define ea12
'(quotient (literal 10) 0))
(define ea13
  '(quotient (literal 10)))
(define ea14
  '(quotient (literal 10) (literal 20) (literal 30)))
(define ea15
'(remainder (literal 10) 0))
(define ea16
'(remainder (String huehue) (Literal kek)))

(define test-check_ill-formed-arithmetic-expressions
  (lambda (candidate)
    (not (or (candidate ea0)
             (candidate ea1)
             (candidate ea2)
             (candidate ea3)
             (candidate ea4)
             (candidate ea5)
             (candidate ea6)
             (candidate ea7)
             (candidate ea8)
             (candidate ea9)
             (candidate ea10)
             (candidate ea11)
             (candidate ea12)
             (candidate ea13)
             (candidate ea14)
             (candidate ea15)
             (candidate ea16)
             ))))

;; Syntaks-tjek
(define check-arithmetic-expression
  (lambda (e)
    (cond
      [(is-literal? e)
       (number? (literal-1 e))]
      [(is-plus? e)
       (and (check-arithmetic-expression (plus-1 e))
            (check-arithmetic-expression (plus-2 e)))]
      [(is-times? e)
       (and (check-arithmetic-expression (times-1 e))
            (check-arithmetic-expression (times-2 e)))]
      [(is-minus? e)
       (and (check-arithmetic-expression (minus-1 e))
            (check-arithmetic-expression (minus-2 e)))]
      [(is-quotient? e)
      (and (check-arithmetic-expression (quotient-1 e))
           (check-arithmetic-expression (quotient-2 e)))]
      [(is-remainder? e)
       (and (check-arithmetic-expression (remainder-1 e))
            (check-arithmetic-expression (remainder-2 e)))]
      [else
       #f])))


;; =========== ### EXERCISE 8 ### ============

(define make-var
  (lambda (x)
    (list 'var x)))
(define make-conj
  (lambda (f1 f2)
    (list 'conj f1 f2)))
(define make-disj
  (lambda (f1 f2)
    (list 'disj f1 f2)))
(define make-neg
  (lambda (f)
    (list 'neg f)))


;;Tests
(define be0
  (make-conj (make-disj (make-var 'x) (make-neg (make-var 'y)))
             (make-neg (make-conj (make-var 'z) (make-var 'x)))))
(define be0-alt
  '(conj
     (disj (var x) (neg (var y)))
     (neg (conj (var z) (var x)))))
(define be1
  (make-disj (make-var 'x) (make-neg (make-var 'x))))
(define be1-alt
  '(disj (var x) (neg (var x))))

(define test-check_well-formed-boolean-expressions
  (lambda (candidate)
    (and (candidate be0)
         (candidate be1)
         )))

(define is-var?
  (lambda (v)
    (and (pair? v)
         (equal? (car v) 'var)
         (proper-list-of-given-length? (cdr v) 1))))
(define is-conj?
  (lambda (v)
    (and (pair? v)
         (equal? (car v) 'conj)
         (proper-list-of-given-length? (cdr v) 2))))
(define is-disj?
  (lambda (v)
    (and (pair? v)
         (equal? (car v) 'disj)
         (proper-list-of-given-length? (cdr v) 2))))
(define is-neg?
  (lambda (v)
    (and (pair? v)
         (equal? (car v) 'neg)
         (proper-list-of-given-length? (cdr v) 1))))

(define var-1
  (lambda (v)
    (list-ref v 1)))
(define conj-1
  (lambda (v)
    (list-ref v 1)))
(define conj-2
  (lambda (v)
    (list-ref v 2)))
(define disj-1
  (lambda (v)
    (list-ref v 1)))
(define disj-2
  (lambda (v)
    (list-ref v 2)))
(define neg-1
  (lambda (v)
    (list-ref v 1)))

;;Modificér is-var? således at symboler bliver angivet som variabler.
(define check-boolean-expression
  (lambda (v)
    (cond
      [(is-var? v)
       (symbol? (var-1 v))]
      [(is-conj? v)
       (and (check-boolean-expression (conj-1 v))
            (check-boolean-expression (conj-2 v)))]
      [(is-disj? v)
       (and (check-boolean-expression (disj-1 v))
            (check-boolean-expression (disj-2 v)))]
      [(is-neg? v)
       (check-boolean-expression (neg-1 v))]
      [else
       #f])))

;; > (check-boolean-expression '(var 123))
;; #f
;; > (check-boolean-expression '(var x))
;; #t
;; > 

;; =========== ### EXERCISE 9 ### ============

;; (EDIT 3. maj 2016)
;; Ill-formed boolean expressions:
(define fb1
  '(var (neg (var 69))))
(define fb2
  '(conj (neg (var x) (var y) (var z))))
(define fb3
  '(neg (conj (conj))))

;;Test for ill-formed booleanudtryk
(define test-check_ill-formed-boolean-expressions
  (lambda (candidate)
    (not (or
          (candidate fb1)
          (candidate fb2)
          (candidate fb3)
          ))))

;; =========== ### EXERCISE 10 ### ============
;;(EDIT 7. maj 2016)
;; Udvid list-ref, list-head og list-tail således at de returnerer en beskrivende fejlmeddelse ved forkerte argumenter.

(define proper-list-ref
  (lambda (l k)
    (if (integer? k) ;;Tjekker om k er et heltal
        (if (not (< k 0)) ;;Tjekker om k > 0
            (if (not (> k (length l))) ;;Tjekker om størrelsen af k er inden for længden af listen l
                (if (list? l) ;;Tjekker om l er en liste
                    (list-ref l k)
                    (errorf 'proper-list-ref "~s is not a proper list" l))
                (errorf 'proper-list-ref "index ~s is out of range for the list ~s" k l))
            (errorf 'proper-list-ref "index ~s is not non-negative" k))
        (errorf 'proper-list-ref "index ~s is not an integer" k))))

(define test-proper-list-ref
  (lambda (candidate)
    (and (equal? (candidate '(0 1 2 3 4 5) 0)
                 0)
         (equal? (candidate '(0 1 2 3 4 5) 3)
                 3)
         (equal? (candidate '(0 1 2 3 4 5) 5)
                 5)
         ;;;
         )))

;; > (test-proper-list-ref proper-list-ref)
;; #t



(define proper-list-head
  (lambda (l k)
    (if (integer? k) ;;Tjekker om k er et heltal
        (if (not (< k 0)) ;;Tjekker om k > 0
            (if (not (> k (length l))) ;;Tjekker om størrelsen af k er inden for længden af listen l
                (if (list? l) ;;Tjekker om l er en liste
                    (list-head l k)
                    (errorf 'proper-list-ref "~s is not a proper list" l))
                (errorf 'proper-list-ref "index ~s is out of range for the list ~s" k l))
            (errorf 'proper-list-ref "index ~s is not non-negative" k))
        (errorf 'proper-list-ref "index ~s is not an integer" k))))

(define test-proper-list-head
  (lambda (candidate)
    (and (equal? (candidate '(0 1 2 3 4 5) 0)
                 '())
         (equal? (candidate '(0 1 2 3 4 5) 3)
                 '(0 1 2))
         (equal? (candidate '(0 1 2 3 4 5) 5)
                 '(0 1 2 3 4))
         (equal? (candidate '(0 1 2 3 4 5) 6)
                 '(0 1 2 3 4 5))
         ;;;
         )))

;; > (test-proper-list-head proper-list-head)
;; #t



(define proper-list-tail
  (lambda (l k)
    (if (integer? k) ;;Tjekker om k er et heltal
        (if (not (< k 0)) ;;Tjekker om k > 0
            (if (not (> k (length l))) ;;Tjekker om størrelsen af k er inden for længden af listen l
                (if (list? l) ;;Tjekker om l er en liste
                    (list-tail l k)
                    (errorf 'proper-list-ref "~s is not a proper list" l))
                (errorf 'proper-list-ref "index ~s is out of range for the list ~s" k l))
            (errorf 'proper-list-ref "index ~s is not non-negative" k))
        (errorf 'proper-list-ref "index ~s is not an integer" k))))

(define test-proper-list-tail
  (lambda (candidate)
    (and (equal? (candidate '(0 1 2 3 4 5) 0)
                 '(0 1 2 3 4 5))
         (equal? (candidate '(0 1 2 3 4 5) 3)
                 '(3 4 5))
         (equal? (candidate '(0 1 2 3 4 5) 5)
                 '(5))
         (equal? (candidate '(0 1 2 3 4 5) 6)
                 '())
         ;;;
         )))

;; > (test-proper-list-tail proper-list-tail)
;; #t




;; =========== ### EXERCISE 14 ### ============
;;(EDIT 7. maj 2016)
;;UNION af to sæt

(define set-union
  (lambda (x y)
    (cond ((null? x) y)                             ;;Basis: Hvis et sæt er tomt, returnerer det andet sæt.
          ((member (car x) y)                       ;;Induktion: Hvis car(x) er en del af sættet y:
           (set-union (cdr x) y))                   ;;Så vil foreningen af x og y være det samme som foreningen af cdr(x) og y.
          (else                                     ;;Ellers så, hvis car(x) ikke er en del af y:
           (cons (car x)(set-union (cdr x) y))))))  ;;Så vil foreningen af x og y være det samme som foreningen sættet med car(x) og cdr = foreningen af cdr(x) og y.


;;INTERSECTION af to sæt

(define set-intersection
  (lambda (x y)
  (cond ((null? x) '())                                 ;;Basis: Hvis et sæt er tomt, så returneres det tomme sæt.
        ((member (car x) y)                             ;;Induktion: Hvis car(x) er en del af sættet y:
         (cons (car x)(set-intersection (cdr x) y)))    ;;Så er fællesmængden af to sæt, x og y, = sættet hvor car = x og cdr = fællesmængden af cdr(x) of y.
        (else                                           ;;Hvis car(x) ikke er en del af sættet y:
         (set-intersection (cdr x) y)))))               ;;Så er fællesmængden af to sæt, x og y, = fællesmængden af cdr(x) og y.


;;DIFFERENCE af to sæt

(define set-difference
  (lambda (x y)
    (cond ((null? x) '())                                ;;Basis: Hvis et sæt er tomt, så returneres det tomme sæt.
          ((not (member (car x) y))                      ;;Induktion: Hvis car(x) ikke er en del af sættet y:
           (cons (car x)(set-difference (car x) y)))     ;;Så er forskellen mellem to sæt, x og y, = sættet som består af car(x) og forskellen mellem car(x) og y.
          (else                                          ;;Hvis car(x) ér en del af y, så:
           (set-difference (car x) y)))))                ;;er forskellen mellem x og y det samme som forskellen mellem car(x) og y.


;; =========== ### EXERCISE 17 ### ============
;; SUMMARY OF ARTICLE

;; "Reflections on Trusting Trust" is an article written by Ken Thompson regarding his view as a programmer and what he regards as the cutest program
;; he ever wrote. This program compiles into a program that is self-replicating, which in a non-deliberate case would be called a compiler-bug but in this
;; case is called a "Trojan horse". This Trojan horse resulted in Thompson being able to log into a computer as any user if his code had been installed in the binary system.
;; By inserting a second Trojan horse it could create a buggy binary and thus hide the evidence of the first Trojan in the C-compiler. This way the program could contain
;; a Trojan horse invisible to people who looked through the source code of the program. Ken Thompson points out the moral of the article being code from others cannot be trusted
;; in the same way as one's own code can. The final statements touches the topic of digital crime, and how it should be treated as real crime.
